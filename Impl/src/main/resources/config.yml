###############################
#    Skidusa Configuration    #
###############################

# Appearance configuration.
# If you want to change how Skidusa looks, you can do it here.
appearance:

  # Theme system.
  # How to make theme:
  # Split the string with dollar sign symbol ($)
  # First, put the name of the Theme (Ex: Medusa)
  # Then, put $ and space after it (Ex: Medusa$ )
  #
  # After this, put the alert format and a $ after it,
  # followed by a space (Ex: &aMedusa » &f%player% &7failed &f%checkName% &7(x%vl%)$ )
  #
  # Then, put TWO (no more, no less, can be the same)
  # accent colours you want using the Minecraft colour code symbols (Ex: &a &c)
  #
  # Placeholders:
  # %player% - Player's name
  # %uuid% - Player's UUID
  # %checkName% - Name of the check (e.g. Reach, AutoClicker, KillAura, Speed, Fly)
  # %checkType% - ID of the check, just a letter like A, B, C.
  # %dev% - Experimental status of the check, if the check has a "*" after it, it's experimental.
  # %vl% - Current violation level of the check flagged.
  # %maxvl% - Maximum violation level of the check flagged.
  # %ping% - Latency of the player.
  # %tps% - TPS of the server.

  themes:
    - "Skidusa$ &4&lSkidusa&r&7 » &4%player%&7 flagged &4%checkName% &7(&4%checkType%&7) (&4x%vl%&7) &4%dev%$ &c &4"
    - "Medusa$ &aMedusa » &f%player% &7failed &f%checkName% (%checkType%) &7(x%vl%) &c%dev%$ &a &2"
    - "Alice$ &8[&cAlice&8] &7» &7%player% &rfailed &c%checkName% %checkType% &8[&r::::::&7:::&8]$ &a &2"
    - "Overflow$ &7[&cOverflow&7] %player% flagged &c%checkName% (type %checkType%) VL: &c%vl% %dev%$ &c &4"
    - "Sparky$ &eSparky &7> &6%player% &7has failed &6%checkName% (%checkType%) &cx%vl%$ &6 &e"
    - "Karhu$ &8[&b&lKarhu&r&8] &3%player% &8- &3%checkName% %checkType% &f%dev% &3(&bx%vl%&3)$ &b &3"
    - "Rock$ &8[&c!&8] &f%player% &7may be using &f%checkName% &c(%vl%)$ &c &c"
    - "Vulcan$ &8[&c&l!&8] &c%player% &7failed &b%checkName% (Type %checkType%) &7[VL: &c%vl%&7]$ &c &7"
    - "VulcanNew$ &cVulcan &8/ &c%player% &7failed &b%checkName% &7(&bType %checkType%&7) (%vl%/%maxvl%)$ %b %3"
    - "AAC$ &7[&6AAC&7] &2[CONSOLE] &f%player% is suspected of using %checkName% (%ping%ms, %tps%TPS)$ %f %6"
    - "Spartan$ &8[&2Spartan&8] &c%player% failed %checkName% (VL: %vl%) &8(&fPing: %ping%ms&8) (&fTPS: %tps%&8) (&freason: type %checkType%, hover for more info.&8)$ &a &2"
    - "GodsEye$ &6GodsEye >> &c%player% &7failed &c%checkName% &8[&fType%checkType%&8] [&fx%vl%&8]$ &6 &c"
    - "Reflex$ &5Reflex &8» &7%player% &f%checkName% %checkType% &d%vl%/%maxvl% &7| ping: %ping% | tps: %tps%$ &d &5"
    - "Iris$ &8[&b&lIris&r&8] &f%player% &7has failed &f%checkName% (%checkType%) &c(x%vl%)$ &7 &b"
  # Accent colours. Changes color look of aspects of Skidusa.
  accents:
    accentOne: '&c'
    accentTwo: '&4'

# Violation configuration section.
# Placeholders:
# %player% - Player's name
# %uuid% - Player's UUID
# %checkName% - Name of the check (e.g. Reach, AutoClicker, KillAura, Speed, Fly)
# %checkType% - ID of the check, just a letter like A, B, C.
# %dev% - Experimental status of the check, if the check has a "*" after it, it's experimental.
# %vl% - Current violation level of the check flagged.
# %maxvl% - Maximum violation level of the check flagged.
# %ping% - Latency of the player.
# %tps% - TPS of the server.
# (VL = Violation Level = How many times a player has flagged the check)
violations:
  # Changes how Skidusa's default notifications look.
  alert-format: '&4&lSkidusa&r&7 » &4%player%&7 flagged &4%checkName% &7(&4%checkType%&7) (&4x%vl%&7) &4%dev%'
  # Time which has to be elapsed between notifications to prevent chat spam.
  alert-cooldown: 0
  # How much VL the check has to have in order to notify staff.
  minimum-vl-to-alert: 0
  # Time in minutes for how ofter the violations for players will be reset.
  clear-violations-delay: 5

# Check configuration
# enabled: Turns the check on/off.
# max-violations: Amount of times a player can flag before running the specified punish-command.
# punish-command: Command ran by the server when a player exceeds the specified max-violations.
#
# I (Spiriten) am working to make Skidusa more customizable. Here are some things to note before changing:
# Buffer is like pre-flagging. If it flags that many times, it'll send you a flag
# Buffer decay is how fast the buffer gets removed
# You will likely not need to mess with any of these settings. They do offer you customization and the ability
# to fix up the anticheat to your own needs without opening it in an IDE though
checks:
  # Combat Detections: Offers various checks designed to detect modules used to give a significant combat advantage.
  combat:
    # AutoBlock Detections: Meant to catch autoblock cheats. Very niche, but fun to deal with so why not?
    autoblock:
      # Uses a tick system to check for autoblock
      a:
        enabled: true
        max-violations: 1
        punish-command: ''
      # Checks for an autoblock packet sequence
      b:
        enabled: true
        max-violations: 1
        punish-command: ''
      # Checks if the player is attacking and digging at the same time.
      c:
        enabled: true
        max-violations: 15
        punish-command: ''
        buffer: 5
        buffer-decay: 1
      # Checks if the player is attacking and blocking at the same time.
      d:
        enabled: true
        max-violations: 15
        punish-command: ''
    # AutoClicker Detections: Capable of detecting some AutoClicker modules on various clients/auto-clickers. Not
    # recommended to ban for these checks since players click in more sophisticated ways which may flag these checks,
    # only use them as a hint that the player could be cheating. If you want to enforce a maximum CPS to ban for, use
    # AutoClicker A detection.
    autoclicker:
      # Checks for extremely fast left clicking. If the player clicks faster than the set CPS threshold, flag.
      a:
        enabled: true
        max-violations: 1
        punish-command: ''
        # max-cps: The maximum amount of CPS (this won't flag, any higher than it will)
        max-cps: 20
      # Unspecified AutoClicker detection heuristic B.
      b:
        enabled: true
        max-violations: 15
        punish-command: ''
        buffer: 50
        buffer-decay: 12
        # A higher sample size can mean more accurate, but it will also take more samples to detect. Its a balancing act
        # that I haven't been able to tackle yet.
        sample-size: 150
      # Unspecified AutoClicker detection heuristic C.
      c:
        enabled: true
        max-violations: 3
        punish-command: ''
        buffer: 25
        buffer-decay: 8
        # A higher sample size can mean more accurate, but it will also take more samples to detect.
        sample-size: 50
      # Unspecified AutoClicker detection heuristic D.
      d:
        enabled: true
        max-violations: 15
        punish-command: ''
        buffer: 50
        buffer-decay: 8
        # A higher sample size can mean more accurate, but it will also take more samples to detect.
        sample-size: 100
        # The outliers max is the maximum amount of samples that can be outliers
        outliers-maximum: 10
        # The duplicate minimum is the minimum number of identical samples
        duplicates-minimum: 85
      # Unspecified AutoClicker detection heuristic E.
      e:
        enabled: true
        max-violations: 1
        punish-command: ''
      # Unspecified AutoClicker detection heuristic E.
      f:
        enabled: true
        max-violations: 1
        punish-command: ''
    # Bad Aim Detections: Meant to catch irregular aim
    badaim:
      # Checks for a generic flaw related to aim assistance tools.
      a:
        enabled: true
        max-violations: 25
        punish-command: ''
        buffer: 15
      # Checks for aim consistency. If the player's rotation change is consistent over time, flag.
      b:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 8
      # Checks for out-of-sync yaw/pitch changes. If the player is aiming more horizontally than vertically, flag.
      c:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 20
      # Checks for too low aim divisor. If the player's rotation change divisor is too low, flag.
      d:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 15
        buffer-decay: 1
      # Checks for rounded rotation changes. If the player is aiming with perfectly rounded values, flag.
      e:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 4
        buffer-decay: 0.25
      # Checks for aim divisor changes. If the player's rotation change divisor changes in two rotations, flag.
      f:
        enabled: true
        max-violations: 0
        punish-command: ''
        buffer: 6
      # Checks for aiming behaviour similar to blatant AimBot modules. If the player is aiming like an AimBot, flag.
      g:
        enabled: true
        max-violations: 25
        punish-command: ''
        buffer: 9
      # Snappy rotation check.
      h:
        enabled: true
        max-violations: 50
        punish-command: ''
        buffer: 1.3
        buffer-decay: 0.05
    # KillAura Detections: Capable of detecting some KillAura modules on various clients. Recommended to ban for these
    # checks, however use at your own risk.
    killaura:
      # Checks for hitting multiple entities at once. (MultiAura Detection)
      a:
        enabled: true
        max-violations: 1
        punish-command: ''
      # Checks for an improbable accuracy. If the player is very accurate in fights, flag.
      b:
        enabled: true
        max-violations: 5
        punish-command: ''
        buffer: 20
        buffer-decay: 2
      # Checks for hitting through walls. (AttackOcclusion Detection)
      c:
        enabled: true
        max-violations: 25
        punish-command: ''
        buffer: 50
        buffer-decay: 20
      # Checks for large head movements without slowing down.
      d:
        enabled: true
        max-violations: 50
        punish-command: ''
      # Checks for invalid rotations.
      e:
        enabled: true
        max-violations: 50
        punish-command: ''
      # Checks for killaura tendencies.
      f:
        enabled: true
        max-violations: 50
        punish-command: ''
      # Checks for switch aura.
      g:
        enabled: true
        max-violations: 50
        punish-command: ''
    # Reach Detections: Capable of detecting hit reach modifications.
    reach:
      # Reach A: Sophisticated reach check based on the concept of backtracking.
      # (This check can be bypassed using FakeLag/PingSpoof)
      # Reach B: Simple reach check that can avoid fake lag or ping spoof exploits, needs higher threshold.
      a:
        enabled: true
        max-violations: 25
        punish-command: ''
        # max-reach: How low reach this check should detect.
        # max-threshold: How many reach hits this player needs to be flagged.
        # threshold-decay: How much the threshold should decrease if there is not a reach hit.
        # max-latency: How much ping (in milliseconds) the player can have before they do not get flagged by the check.
        # 150 is default latency due to falses
        max-reach: 3.01
        max-threshold: 5.0
        threshold-decay: 0.1
        max-latency: 150
      b:
        enabled: true
        max-violations: 25
        punish-command: ''
        buffer: 20
        buffer-decay: 4
        # max-reach: How low reach this check should detect. (Recommended: No lower than 3.5)
        # max-latency: How much ping (in milliseconds) the player can have before they do not get flagged by the check.
        # -1 is default and means there is no limit.
        max-reach: 3.3
        max-latency: -1
    # Velocity Detections: Capable of detecting some movement modifications when taking knock-back.
    velocity:
      a:
        # This velocity check looks for complete antikb vertically. Should work on blatant clients.
        enabled: true
        max-violations: 0
        punish-command: ''
        buffer: 4
      b:
        # Experimental check for vertical velocity. Should detect any regular velocity modification.
        enabled: true
        max-violations: 0
        punish-command: ''
        # Any percentage lower than this will flag. 1.0 = 100%, 0.9 = 90%.
        max-velocity: 0.998
        # This is the minimum velocity that the check will flag at. Put it too low and there may be falses.
        min-velocity: 0.05
      c:
        # Very WIP check
        enabled: true
        max-violations: 0
        punish-command: ''
        #These are the velocity percentages it should flag under. 0.5 is 50% and 1.0 is 100%
        #Sprinting velocity is the velocity when sprinting. Reduced due to movement.
        #For absolute accuracy go for 0.635. 0.594 may lower falses a little.
        sprinting-velocity: 0.635
        #Walking velocity is the velocity when walking. Reduced due to movement. 0.715 is default.
        walking-velocity: 0.715
        #Standing velocity is the velocity when standing. Reduced due to some issues with my method. 0.975 is default.
        standing-velocity: 0.975
  # Movement Detections: Offers various checks designed to detect blatant movement advantages.
  movement:
    # FastClimb Detection: Checks if the player moves too quickly on ladders.
    fastclimb:
      # Checks if the player moves too quickly vertically on ladders.
      a:
        enabled: true
        max-violations: 5
        punish-command: ''
        buffer: 2
        buffer-decay: 0.5
    # Fly Detections: Capable of detecting most fly hacks.
    fly:
      # Checks if the player follows Minecraft's gravity rule.
      a:
        enabled: true
        max-violations: 35
        punish-command: ''
        buffer: 10
        buffer-decay: 0.75
      # Checks if the player jumps while in air.
      b:
        enabled: true
        max-violations: 10
        punish-command: ''
      # Checks if the player claims to be on ground while in air.
      c:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 2.5
        buffer-decay: 0.15
      # Checks for falling speed.
      d:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 3
        buffer-decay: 0.5
      # Backup ground spoof check
      e:
        enabled: true
        max-violations: 10
        punish-command: ''
      # Checks stable fly.
      f:
        enabled: true
        max-violations: 10
        punish-command: ''
    # Jesus Detections: (WIP) Capable of detecting some movement modifications in water.
    jesus:
      # Checks for correct horizontal movement while in/on water.
      a:
        enabled: false
        max-violations: 25
        punish-command: ''
        buffer: 50
        buffer-decay: 1
      b:
        # Checks for irregular acceleration
        enabled: false
        max-violations: 25
        punish-command: ''
        buffer: 15
        buffer-decay: 0.5
    # KeepSprint Detections: (WIP) Semi-advanced KeepSprint cheat detection
    keepsprint:
      # Basic KeepSprint check.
      a:
        enabled: true
        max-violations: 5
        punish-command: ''
        buffer: 5
        buffer-decay: 0.25
    # Motion Detections: Capable of detecting various less significant movement modules.
    motion:
      # Checks if the player moves at a constant rate vertically.
      a:
        enabled: true
        max-violations: 5
        punish-command: ''
        buffer: 16
        buffer-decay: 1
      # Checks if the player falls too fast.
      b:
        enabled: true
        max-violations: 5
        punish-command: ''
      # Checks if the player travels vertically at the correct speed.
      c:
        enabled: true
        max-violations: 25
        punish-command: ''
        # max-high-jump is the maximum allowed jump height. default Minecraft is 0.42, but to account for falses I have
        # set it to 0.53
        max-high-jump: 0.53
      # Checks if the player is sprinting sideways or backwards.
      d:
        enabled: true
        max-violations: 5
        punish-command: ''
        buffer: 8
        buffer-decay: 0.5
      # wip
      e:
        enabled: true
        max-violations: 5
        punish-command: ''
    # NoSlow Detections: Capable of detecting Vanilla NoSlow.
    noslow:
      # Checks if the player is blocking and sprinting simultaneously.
      a:
        enabled: true
        max-violations: 25
        punish-command: ''
        buffer: 10
      # Checks if the player is sneaking and sprinting simultaneously.
      b:
        enabled: true
        max-violations: 25
        punish-command: ''
    # Prediction Detections: Uses Minecraft code to hopefully accurately detect cheaters.
    prediction:
      # Checks for fly using prediction.
      a:
        enabled: true
        max-violations: 5
        punish-command: ''
      # Checks for friction modification using prediction.
      b:
        enabled: true
        max-violations: 5
        punish-command: ''
        buffer: 2
      # Checks for fly using prediction.
      c:
        enabled: true
        max-violations: 5
        punish-command: ''
    # Speed Detections: Capable of detecting Speed modules that offer a significant advantage.
    speed:
      # Checks if the player is decreasing speed in air at a valid rate.
      a:
        enabled: true
        max-violations: 25
        punish-command: ''
        buffer: 40
        buffer-decay: 1
      # Checks if the player is moving at a correct speed. If player is moving too fast, flag.
      b:
        enabled: true
        max-violations: 50
        punish-command: ''
        buffer: 10
      # Checks for impossible speeds when rotating.
      c:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 6
        buffer-decay: 1
        # Checks if the player is moving at a correct speed. This check is more lenient than Speed B.
      d:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 100
        buffer-decay: 10
      # Checks if the player goes faster than the Minecraft limit.
      e:
        enabled: true
        max-violations: 10
        punish-command: ''
  # Player Detections: Offers various checks to detect miscellaneous cheats not covered by the other categories.
  player:
    # badpackets Detections: Checks for various flaws in Minecraft's networking protocol hacked clients may have.
    badpackets:
      # Checks if the player looks too far up or down.
      a:
        enabled: true
        max-violations: 1
        punish-command: ''
      # Checks if the player is attempting to force the server into thinking they are flying.
      b:
        enabled: true
        max-violations: 15
        punish-command: ''
      # Checks if the player is using a common disabler exploit.
      c:
        enabled: true
        max-violations: 15
        punish-command: ''
      # Checks if the player moves the slot in their inventory correctly.
      d:
        enabled: true
        max-violations: 15
        punish-command: ''
      # Checks if the player is using a common disabler exploit.
      e:
        enabled: true
        max-violations: 15
        punish-command: ''
        buffer: 8
      # A No Swing check.
      f:
        enabled: true
        max-violations: 15
        punish-command: ''
    # Hand Detections: (WIP) Capable of detecting interaction hacks.
    hand:
      # Checks if the player interacts with a block they cannot see.
      a:
        enabled: true
        max-violations: 0
        punish-command: ''
      # Checks for placing angle.
      b:
        enabled: true
        max-violations: 0
        punish-command: ''
        max-angle-dif: 90
    # Inventory Detections: Checks for various cheats related to inventory (InventoryWalk, ChestSteal)
    inventory:
      # Checks if the player is moving while in their inventory.
      a:
        enabled: true
        max-violations: 0
        punish-command: ''
      # Potentially more advanced version of Inventory A. May cause falses.
      b:
        enabled: true
        max-violations: 15
        punish-command: ''
    # PacketOrder Detections: Checks for certain orders of packets sent.
    packetorder:
      # Checks for a common killaura packet order
      a:
        enabled: true
        max-violations: 15
        punish-command: ''
        buffer: 2
        buffer-decay: 0.15
      # Checks for a common scaffold packet order.
      b:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 2
        buffer-decay: 0.25
      # Checks if the player follows the correct sequence for Update Packets (C03PacketPlayer or PacketPlayInFlying).
      c:
        enabled: true
        max-violations: 15
        punish-command: ''
      # Checks if the player follows the correct packet sequence for placing blocks.
      d:
        enabled: true
        max-violations: 15
        punish-command: ''
        buffer: 5
        buffer-decay: 2
      # Checks for invalid entity use packets.
      e:
        enabled: true
        max-violations: 50
        punish-command: ''
      # Checks for late block place packets.
      f:
        enabled: true
        max-violations: 50
        punish-command: ''
        buffer: 8
        buffer-decay: 0.75
    # Scaffold Detections: Capable of detecting "auto-bridging" modules in various clients.
    scaffold:
      # Checks if the player turns their head suspiciously while bridging.
      a:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 3
        buffer-decay: 0.5
      # Checks if the player is bridging vertically too quickly.
      b:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 2
      # Checks if the player placed blocks under themselves through another block.
      c:
        enabled: true
        max-violations: 10
        punish-command: ''
      # Checks if the player is using SafeWalk (prevents player from walking off the edge of blocks) to aid
      # them in bridging.
      d:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 5
        buffer-decay: 0.1
      # Checks high yaw/pitch change.
      e:
        enabled: true
        max-violations: 10
        punish-command: ''
        buffer: 2
    # Timer Detections: Capable of detecting if the player is intentionally changing how fast their game runs.
    timer:
      # Normal method capable of detecting as low as 1.03 timer.
      a:
        enabled: true
        max-violations: 50
        punish-command: ''
        buffer: 30
        buffer-decay: 1
        # max-timer-speed: Normal speed is 1.0, however lag and other quirks may make it higher (around 1.03). If you
        # experience false positives, make this value slightly higher.
        max-timer-speed: 1.03
      # Method to detect slow timer (found in some movement modules and disablers)
      b:
        enabled: true
        max-violations: 50
        punish-command: ''
        buffer: 1
        # minimum-timer-speed: Normal speed is 1.0, however lag and other quirks may make it lower (around 0.75). If you
        # experience false positives, make this value slightly lower. (Does not work properly on 1.9+)
        minimum-timer-speed: 0.75
      # Sophisticated method capable of detecting any timer speed increase (1.00001x and more).
      c:
        enabled: true
        max-violations: 50
        punish-command: ''
        # maximum-balance: 0 by default, if you have some false positives set this higher.
        # maximum-balance: -60 by default, if you have some false positives set this lower.
        # balance-reset: -50 by default, if you have some false positives set this lower. Do not go above your maximum-balance.
        # balance-subtraction-on-teleport: 50 by default, if you have teleportation false positives lower this.
        maximum-balance: 0
        balance-reset: -50
        balance-subtraction-on-teleport: 50
      # Potentially better under 1.0 timer check. Higher buffer, but better stability.
      d:
        enabled: true
        max-violations: 50
        punish-command: ''
        buffer: 5
        buffer-decay: 0.5
        # timer-speed: 0.9 by default. Flags anything lower than this amount.
        timer-speed: 0.75
